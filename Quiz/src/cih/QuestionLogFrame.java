/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cih;

import cci.MainControl;
import cln.cdp.Category;
import static cln.cdp.Category.CULTURE;
import static cln.cdp.Category.GEOGRAPHY;
import static cln.cdp.Category.HISTORY;
import static cln.cdp.Category.SCIENCE;
import static cln.cdp.Category.SPORT;
import cln.cdp.Difficulty;
import cln.cdp.Question;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bernardo
 */
public class QuestionLogFrame extends javax.swing.JFrame {

    String question;
    Category category;
    String level;
    int row;

    MainControl mainControl;

    /**
     * Creates new form QuestionLogFrame
     */
    public QuestionLogFrame() {
        initComponents();
    }

    public QuestionLogFrame(MainControl mainControl) {
        this.mainControl = mainControl;
        initComponents();
    }

    public void addRowToQuestionLogTable(Question question) {
        if (question.getCategory().equals(CULTURE)) {
            DefaultTableModel model = (DefaultTableModel) cultureQuestionLogTable.getModel();
            Object[] row = {question.getQuestion(), question.getDifficulty(), question.getAnswers().get(0),
                question.getAnswers().get(1), question.getAnswers().get(2), question.getAnswers().get(3)};
            model.addRow(row);
        } else if (question.getCategory().equals(GEOGRAPHY)) {
            DefaultTableModel model = (DefaultTableModel) geographyQuestionLogTable.getModel();
            Object[] row = {question.getQuestion(), question.getDifficulty(), question.getAnswers().get(0),
                question.getAnswers().get(1), question.getAnswers().get(2), question.getAnswers().get(3)};
            model.addRow(row);
        } else if (question.getCategory().equals(HISTORY)) {
            DefaultTableModel model = (DefaultTableModel) historyQuestionLogTable.getModel();
            Object[] row = {question.getQuestion(), question.getDifficulty(), question.getAnswers().get(0),
                question.getAnswers().get(1), question.getAnswers().get(2), question.getAnswers().get(3)};
            model.addRow(row);
        } else if (question.getCategory().equals(SCIENCE)) {
            DefaultTableModel model = (DefaultTableModel) scienceQuestionLogTable.getModel();
            Object[] row = {question.getQuestion(), question.getDifficulty(), question.getAnswers().get(0),
                question.getAnswers().get(1), question.getAnswers().get(2), question.getAnswers().get(3)};
            model.addRow(row);
        } else {
            DefaultTableModel model = (DefaultTableModel) sportQuestionLogTable.getModel();
            Object[] row = {question.getQuestion(), question.getDifficulty(), question.getAnswers().get(0),
                question.getAnswers().get(1), question.getAnswers().get(2), question.getAnswers().get(3)};
            model.addRow(row);
        }

    }

    public void removeRowFromQuestionLogTable(Category category, int row) {
        if (category.equals(CULTURE)) {
            DefaultTableModel model = (DefaultTableModel) cultureQuestionLogTable.getModel();
            model.removeRow(row);
        } else if (category.equals(GEOGRAPHY)) {
            DefaultTableModel model = (DefaultTableModel) geographyQuestionLogTable.getModel();
            model.removeRow(row);
        } else if (category.equals(HISTORY)) {
            DefaultTableModel model = (DefaultTableModel) historyQuestionLogTable.getModel();
            model.removeRow(row);
        } else if (category.equals(SCIENCE)) {
            DefaultTableModel model = (DefaultTableModel) scienceQuestionLogTable.getModel();
            model.removeRow(row);
        } else {
            DefaultTableModel model = (DefaultTableModel) sportQuestionLogTable.getModel();
            model.removeRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionLogPane = new javax.swing.JTabbedPane();
        culturePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cultureQuestionLogTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        geographyPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        geographyQuestionLogTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        historyPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyQuestionLogTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        sciencePanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        scienceQuestionLogTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        sportPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sportQuestionLogTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cultureQuestionLogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question", "Level", "Right Answer", "Wrong Answer", "Wrong Answer", "Wrong Answer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cultureQuestionLogTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        cultureQuestionLogTable.setCellSelectionEnabled(true);
        cultureQuestionLogTable.setGridColor(new java.awt.Color(204, 204, 204));
        cultureQuestionLogTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cultureQuestionLogTable.setShowGrid(true);
        cultureQuestionLogTable.getTableHeader().setReorderingAllowed(false);
        cultureQuestionLogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cultureQuestionLogTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(cultureQuestionLogTable);
        cultureQuestionLogTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout culturePanelLayout = new javax.swing.GroupLayout(culturePanel);
        culturePanel.setLayout(culturePanelLayout);
        culturePanelLayout.setHorizontalGroup(
            culturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        culturePanelLayout.setVerticalGroup(
            culturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        questionLogPane.addTab("Culture", culturePanel);

        geographyQuestionLogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question", "Level", "Right Answer", "Wrong Answer", "Wrong Answer", "Wrong Answer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        geographyQuestionLogTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        geographyQuestionLogTable.setColumnSelectionAllowed(true);
        geographyQuestionLogTable.setGridColor(new java.awt.Color(204, 204, 204));
        geographyQuestionLogTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        geographyQuestionLogTable.setShowGrid(true);
        geographyQuestionLogTable.getTableHeader().setReorderingAllowed(false);
        geographyQuestionLogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                geographyQuestionLogTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(geographyQuestionLogTable);
        geographyQuestionLogTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout geographyPanelLayout = new javax.swing.GroupLayout(geographyPanel);
        geographyPanel.setLayout(geographyPanelLayout);
        geographyPanelLayout.setHorizontalGroup(
            geographyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        geographyPanelLayout.setVerticalGroup(
            geographyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        questionLogPane.addTab("Geography", geographyPanel);

        historyQuestionLogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question", "Level", "Right Answer", "Wrong Answer", "Wrong Answer", "Wrong Answer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyQuestionLogTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        historyQuestionLogTable.setColumnSelectionAllowed(true);
        historyQuestionLogTable.setGridColor(new java.awt.Color(204, 204, 204));
        historyQuestionLogTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyQuestionLogTable.setShowGrid(true);
        historyQuestionLogTable.getTableHeader().setReorderingAllowed(false);
        historyQuestionLogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                historyQuestionLogTableMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(historyQuestionLogTable);
        historyQuestionLogTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        questionLogPane.addTab("History", historyPanel);

        scienceQuestionLogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question", "Level", "Right Answer", "Wrong Answer", "Wrong Answer", "Wrong Answer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scienceQuestionLogTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        scienceQuestionLogTable.setColumnSelectionAllowed(true);
        scienceQuestionLogTable.setGridColor(new java.awt.Color(204, 204, 204));
        scienceQuestionLogTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scienceQuestionLogTable.setShowGrid(true);
        scienceQuestionLogTable.getTableHeader().setReorderingAllowed(false);
        scienceQuestionLogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                scienceQuestionLogTableMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(scienceQuestionLogTable);
        scienceQuestionLogTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout sciencePanelLayout = new javax.swing.GroupLayout(sciencePanel);
        sciencePanel.setLayout(sciencePanelLayout);
        sciencePanelLayout.setHorizontalGroup(
            sciencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        sciencePanelLayout.setVerticalGroup(
            sciencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        questionLogPane.addTab("Science", sciencePanel);

        sportQuestionLogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question", "Level", "Right Answer", "Wrong Answer", "Wrong Answer", "Wrong Answer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sportQuestionLogTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        sportQuestionLogTable.setColumnSelectionAllowed(true);
        sportQuestionLogTable.setGridColor(new java.awt.Color(204, 204, 204));
        sportQuestionLogTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sportQuestionLogTable.setShowGrid(true);
        sportQuestionLogTable.getTableHeader().setReorderingAllowed(false);
        sportQuestionLogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sportQuestionLogTableMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(sportQuestionLogTable);
        sportQuestionLogTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout sportPanelLayout = new javax.swing.GroupLayout(sportPanel);
        sportPanel.setLayout(sportPanelLayout);
        sportPanelLayout.setHorizontalGroup(
            sportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        sportPanelLayout.setVerticalGroup(
            sportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        questionLogPane.addTab("Sport", sportPanel);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(questionLogPane)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteButton)
                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(questionLogPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        mainControl.addQuestionDialogOpen();
    }//GEN-LAST:event_addButtonActionPerformed

    private void cultureQuestionLogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cultureQuestionLogTableMousePressed
        row = cultureQuestionLogTable.getSelectedRow();
        question = cultureQuestionLogTable.getValueAt(row, 0).toString();
        category = CULTURE;
        level = cultureQuestionLogTable.getValueAt(row, 1).toString();
    }//GEN-LAST:event_cultureQuestionLogTableMousePressed

    private void geographyQuestionLogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_geographyQuestionLogTableMousePressed
        row = geographyQuestionLogTable.getSelectedRow();
        question = geographyQuestionLogTable.getValueAt(row, 0).toString();
        category = GEOGRAPHY;
        level = geographyQuestionLogTable.getValueAt(row, 1).toString();
    }//GEN-LAST:event_geographyQuestionLogTableMousePressed

    private void historyQuestionLogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyQuestionLogTableMousePressed
        row = historyQuestionLogTable.getSelectedRow();
        question = historyQuestionLogTable.getValueAt(row, 0).toString();
        category = HISTORY;
        level = historyQuestionLogTable.getValueAt(row, 1).toString();
    }//GEN-LAST:event_historyQuestionLogTableMousePressed

    private void scienceQuestionLogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scienceQuestionLogTableMousePressed
        row = scienceQuestionLogTable.getSelectedRow();
        question = scienceQuestionLogTable.getValueAt(row, 0).toString();
        category = SCIENCE;
        level = scienceQuestionLogTable.getValueAt(row, 1).toString();
    }//GEN-LAST:event_scienceQuestionLogTableMousePressed

    private void sportQuestionLogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportQuestionLogTableMousePressed
        row = sportQuestionLogTable.getSelectedRow();
        question = sportQuestionLogTable.getValueAt(row, 0).toString();
        category = SPORT;
        level = sportQuestionLogTable.getValueAt(row, 1).toString();
    }//GEN-LAST:event_sportQuestionLogTableMousePressed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        if (question != null && category != null && level != null) {
            mainControl.removeQuestion(question, category, Difficulty.valueOf(level));
            removeRowFromQuestionLogTable(category, row);
        }
        question = null;
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionLogFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel culturePanel;
    private javax.swing.JTable cultureQuestionLogTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel geographyPanel;
    private javax.swing.JTable geographyQuestionLogTable;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JTable historyQuestionLogTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane questionLogPane;
    private javax.swing.JPanel sciencePanel;
    private javax.swing.JTable scienceQuestionLogTable;
    private javax.swing.JPanel sportPanel;
    private javax.swing.JTable sportQuestionLogTable;
    // End of variables declaration//GEN-END:variables
}
