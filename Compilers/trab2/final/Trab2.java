import java.io.FileInputStream;
import java.io.PrintWriter;
import java.lang.Exception;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.ParseTreeWalker;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.antlr.v4.runtime.misc.IntervalSet;

public class Trab2 {
    public static void main(String[] args) {
        try {
            //verify is a file was passed in the argument
            if(args.length < 1){
                System.err.println("File path is missing.");
                return;
            }
            
            //read file
            FileInputStream fs = new FileInputStream(args[0]);
            ANTLRInputStream input = new ANTLRInputStream(fs);
            
            //create lexer, tokens, parser
            GrammarLexer lexer = new GrammarLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            GrammarParser parser = new GrammarParser(tokens);
            
            //change the parser error strategy to bail out of the program if the parsing fails.
            parser.setErrorHandler(new BailErrorStrategy());
            
            //runs the parser starting by the algoritmo context
            GrammarParser.AlgoritmoContext ctx = parser.algoritmo();
            //creates a walker to walk through the tree generated by the parser.
            ParseTreeWalker walker = new ParseTreeWalker();
            
            //create a file to put the .dot output on.
            PrintWriter writer = new PrintWriter(args[0].replaceFirst("[^.]*$", "dot"));
            
            //invokes the listener to be called at each context while the walker walks the tree.
            CustomListener listener = new CustomListener(writer);
            walker.walk(listener, ctx);
            
            //close the communication with the output file
            writer.close();
        }
        //In case there's any syntax error.
        catch(ParseCancellationException e){
            System.out.println("Parse cancelled!");
            //verify if the cancellation was bcs of an input mismatch.
            //then print in a nice way to the console.
            if(e.getCause() instanceof InputMismatchException){
                InputMismatchException ex = (InputMismatchException) e.getCause();
                IntervalSet interval = ex.getExpectedTokens();
                for(int i = 0; i < interval.size();i++ ){
                    String expected = GrammarParser.VOCABULARY.getLiteralName(interval.get(i));
                    CommonTokenStream tokens = (CommonTokenStream) ex.getInputStream();
                    int index = ex.getInputStream().index();
                    String received = tokens.get(index).getText();
                    System.out.println("Expecting "+expected+", but received: "+received);
                }
            }else{
                e.printStackTrace();
            }
        }
        catch(Exception e) {
            System.out.println(e.getCause());
        }
    }
}